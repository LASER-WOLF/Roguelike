///////////////////////////////////////////////////////////////////////////////
// TODO:
///////////////////////////////////////////////////////////////////////////////

  OTHER TASKS:
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

 - Add walls to corridors?

 - Darkness decreases vision range?
 
 - Smooth player movement?

 - Add offset and mesh to tile
 
 - Implement visible and seen to tile class

 - Make FOV a circle (how to make circle in 2d grid?)

 - Culling for 3d meshes

  v0.3.0 TASKS:
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 
 - Goals:
   + Pick a setting/theme
   + Wraparound square tile maps on a sphere https://www.redblobgames.com/x/1938-square-tiling-of-sphere/
   + Make a more sophisticated "overworld" map generator with heightmap, water, biomes, caves
   + Different terrain surface types
   + Render grass, snow, rocks, trees, etc. on top of the terrain
 
 - Make planet coordinate system

 - Add heightmap generator
   + Fractal perlin noise generation

 - Add heightmap to planet
   + Add heightmap
   + Redo normals

 - Map generation algorithms implemented:
   X BSP
   X Dijkstra
   + Cellular Automata
   + Drunken Umber Hulks
   + Diffusion Limited Aggregation
   + DLA with Central Attractor
   + Voronoi Diagrams
   + Perlin/Simplex Noise
 
 - Build a procgen planet generator
   + Different types of planets
   + Different types of terrain
   + Different types of biomes

  v0.3.0 DONE:
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

 X Pick a setting/theme

 X Implement procedually generated cube sphere (for planets)
   X Fix/check UVs
   X Reduce number of verts by sharing between tiles
   X Remove seams between faces (share verts between cube faces)


  v0.2.0 DONE:
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 
 X v0.2.0 Goals:
   X Bring the previous implementation into the third dimension using
     the raylib library (with GLFW bindings (OpenGL))
   X Make a simple 3D map on a 2D grid by generating some triangles from the map data
   X Represent the player character with a simple geometric shape like a box or a sphere
 
 X Smooth camera movement
 
 X Void should be see-through


  v0.1.0 DONE:
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 
 X v1 Goals:
   X 2D fixed size map with collision detection
   X Simple map generation using BSP with doors between rooms
   X A simple lighting system with dark/light areas and light sources 
   X A player controlled character on the map with turn based movement
   X Field of vision algorithm

 X Add more pathfinding algorithms:
   X A* check (check if path exists between two points)
   X A* path (find shortest path between two points)

 X Implemented symmetric shadowcasting based on article by Albert Ford: https://www.albertford.com/shadowcasting/
 
 X Implemented another shadowcasting algorithm based on article by Bob Nystrom: https://journal.stuffwithstuff.com/2015/09/07/what-the-hero-sees/

 X Add player
   X Movement
   X Collision
   X FOV (earlt draft version)

 X Replace lightmap algorithm from bsp to djikstra with doors blocking
 
 X Add lights
 
 X Add pathfinding algorithms:
   X BFS check (check if path exists between two points)
   X BFS path (find path between two points)
   X BFS map (make a map with distance from start values)
   X BFS map reversed (make a map that starts at a value and decreases until a cutoff value is reached)
   X Dijkstra map
   X Dijkstra map reversed
 
 X Corridors: Better inRoom check
 
 X Restrict rooms to more square width/height ratio
 
 X Corridors: Place doors

 X Add corridors to collision check

 X Render pathfinding (debug)
 
 X Implement Vec2 class for positions

 X Rooms and corridors make bool area, not tile area
 
 X Carve out bool area later
 
 X Rewrite TryToAddNeighbors, only try to add for nodes that was already there

 X Rooms/Corridors/PathGraph creation:
   X Add all rooms
   X Make pathgraph for all rooms
   X Add corridor
   X For each corridor: Add to pathgraph modify neighbors

 X Make simple corridors

 X Make better corridors
   X Implement ref paramters for walk methods, keeping track of position 
   X Split corridor into multiple chunks on each new room found, and check if start and endpoint of chunk is reachable, discard chunk if already reachable
   X Make the corridors have some corners at random times
 
 X Replace TILE enum with Tile class
 
 X Implement pathfinding algorithm in tree to check if a point is reachable from another point

 X Collision detection in corridor
   X Check if end point reachable on collision (pathfinding), cancel rest of corridor if endpoint is reachable
 
 X Add pathfinding (BFS)

