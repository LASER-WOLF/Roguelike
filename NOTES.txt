///////////////////////////////////////////////////////////////////////////////
// PROJECT NOTES
///////////////////////////////////////////////////////////////////////////////

 SECTIONS:
   #1: GENERAL NOTES
   #2: ROADMAP

///////////////////////////////////////////////////////////////////////////////
// #1 | GENERAL NOTES
///////////////////////////////////////////////////////////////////////////////

 - Josh Ge, How to Make a Roguelike
   https://youtu.be/jviNpRGuCIU
   https://www.gridsagegames.com/blog/2018/10/how-to-make-a-roguelike/

  - Genre research (other fascinating roguelike projects): 
    + Zach and Tarn Adams, Dwarf Fortress Design Inspirations
      https://youtu.be/Zh6dnx9FM1g
    + How Two People Created Gamingâ€™s Most Complex Simulation System
      https://youtu.be/1ieGQ_YddX0
    + Dwarf Fortress Creator Explains its Complexity & Origins
      https://youtu.be/VAhHkJQ3KgY
    + Tarn Adams - Villains in Dwarf Fortress
      https://youtu.be/4-7TtPX5uhg
    + The 10-Year Journey of Ultima Ratio Regum: The Culture Generating Roguelike 
      https://youtu.be/giIIoIKntnw
    + End-to-End Procedural Generation in Caves of Qud
      https://youtu.be/jV-DZqdKlnE
    + Procedurally Generating History in Caves of Qud
      https://youtu.be/H0sLa1y3BW4
    + The Birth of the Japanese RPG
      https://youtu.be/fJiwn8iXqOI

 - PlantUML (UML diagrams)
   + http://real-world-plantuml.com/
   + https://plantuml.com/guide

 - Render and input
   + Pick a render mode
     + CLI (render and input using built in C# methods)
     + 2D rendering with tilesets (raylib?)
     + Pseudo-3D rendering with a Comanche-like voxel terrain engine and 2D sprites (raylib?)
     + 3D rendering with OpenGL (GLFW or GLFW through raylib?)
   + C# bindings libraries:
     + raylib-cs
       https://github.com/ChrisDill/Raylib-cs
     + GLFW.NET
       https://github.com/ForeverZer0/glfw-net
     + Silk.NET 
       https://github.com/dotnet/Silk.NET
   + Tilesets:
     + Scroll-o-Sprites
       https://www.reddit.com/r/roguelikedev/comments/1dmbxr/art_scrollosprites/
     + Kenney, Micro Roguelike
       https://kenney.nl/assets/micro-roguelike
     + Loveable Rogue
       https://opengameart.org/content/loveable-rogue

  - Programming patterns to try implementing:
    + Command pattern (for all actions performed by characters)
      https://gameprogrammingpatterns.com/command.html
    + Flyweight pattern (for terrain tiles)
      https://gameprogrammingpatterns.com/flyweight.html
    + Prototype pattern (for JSON data)
      https://gameprogrammingpatterns.com/prototype.html
    + State pattern (for characters)
      https://gameprogrammingpatterns.com/state.html
    + Double buffer (for the framebuffer (when moving to 3D))
    + Game loop (simple one at first, add more complexity later)
    + Update method (turn based at first, possibly real time at a later implementation)
    + Component pattern (at later stage, for all "Entities" in game, character, items, etc.)
    + Event queue pattern ( ... )
    + Object pool pattern ( ... )
    + Observer or Publisher-Subscriber pattern ( ... )
    + Unused patterns:
      + Singleton
      + Bytecode
      + Subclass sandbox
      + Type object
      + Service locator
      + Data locality
      + Dirty flag
      + Spatial partion

 - C# links:
   + Bitwise and shift operators: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators
   + ConsoleKey Enum: https://learn.microsoft.com/en-us/dotnet/api/system.consolekey

 - Console color codes: https://ss64.com/nt/syntax-ansi.html

 - Dotnet building:
   + Build command (windows): dotnet publish -r win-x64 -p:PublishSingleFile=true --self-contained true
   + Build command (linux):   dotnet publish -r linux-x64 -p:PublishSingleFile=true --self-contained true
   + Other well-known RIDs:
     + win-x86
     + linux-arm
     + linux-arm64
     + osx-x64

 - Roguelike Development Resources: https://github.com/marukrap/RoguelikeDevResources

 - Dear ImGui + Raylib + C#: https://www.lukeselman.com/dear-imgui-raylib-c-2/

 - Pathfinding algorithms:
   + http://theory.stanford.edu/~amitp/GameProgramming/
   + https://www.redblobgames.com/pathfinding/a-star/introduction.html
   + https://www.redblobgames.com/pathfinding/a-star/implementation.html
   + https://www.redblobgames.com/pathfinding/distance-to-any/

 - Shadow casting:
   + https://youtu.be/y1zkrTcNJbc
   + http://www.adammil.net/blog/v125_Roguelike_Vision_Algorithms.html
   + https://www.albertford.com/shadowcasting/

///////////////////////////////////////////////////////////////////////////////
// #2 | ROADMAP
///////////////////////////////////////////////////////////////////////////////

  Part 1: Make very simple roguelike that renders in the console
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals
     + 2D fixed size map with collision detection
     + Simple map generation using BSP with doors between rooms
     + A player controlled character on the map with turn based movement
     + Field of vision algorithm (requires line of sight/line drawing algorithms)
     + A simple lighting system with dark/light areas and light sources 
       (using Dijkstra algorithm, handling multiple light sources in a single pass)
   
   + FOV
     + https://roguebasin.com/index.php/Line_of_sight
     + https://roguebasin.com/index.php/Field_of_Vision
   
   + BSP
     + https://roguebasin.com/index.php/Basic_BSP_Dungeon_generation
   
   + For line of sight/line drawing: DDA or Bresenham perhaps?

   + Dijkstra
     + https://www.roguebasin.com/index.php/The_Incredible_Power_of_Dijkstra_Maps
     + https://www.roguebasin.com/index.php/Dijkstra_Maps_Visualized
   
   + Structure
     + Object-oriented data structure (object inheritance design)
     
     + Folder structure:
       builds/           // Builds
       docs/             // Documentation
       src/              // Source code
       tests/            // Test code
       README.md         // GitHub readme
       NOTES.txt         // Project notes and external resources
       TODO.txt          // Planned changes/features
       CHANGELOG.txt     // Version history
     
     + Interfaces:
       + ...

     + Base classes:
       + ...

     + Classes:
       + ...
 

 Part 2: Make a 3D version of the roguelike using raylib
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals:
     + Bring the previous implementation into the third dimension using
       the raylib library (with GLFW bindings (OpenGL))
     + Make a simple 3D map on a 2D grid by generating some triangles from the map data
     + Represent the player character with a simple geometric shape like a box or a sphere
     + Change data strucutre to Component-Based Design
     + Implement a Manager class to manage creation/deletion of characters and other game-objects + adding/removing components
 

 Part 3: 3D world generation
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals:
     + Pick a setting/theme
     + Wraparound square tile maps on a sphere https://www.redblobgames.com/x/1938-square-tiling-of-sphere/
     + Make a more sophisticated map generator with heightmap, water, biomes, caves, prefabs (small towns, camps etc.)
     + Different terrain surface types
     + Render grass, snow, rocks, trees, etc. on top of the terrain
   
   + Settings/themes:
     + Fantasy science fiction
       + Mixing fantasy elements with science fiction and elements of cosmic horror
       + Space wizards
     + Historically accurate period piece type setting
     
   + Map generation:
     + Herbert Wolverson, Procedural Map Generation Techniques
       https://youtu.be/TlLIOgWYVpI
     + Brian Walker, Procedural level design in Brogue and beyond
       https://youtu.be/Uo9-IcHhq_w
     + Algorithms
       + BSP
         + Good for a series of connected square rooms
       + Cellular Automata
         + https://roguebasin.com/index.php/Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels
         + Good for organic maps like caves and forests
       + Drunken Umber Hulks
         + Organic, player can reach all points
         + Looks like it was carved out by water
         + Good for limestone caverns or similar
       + Diffusion Limited Aggregation
         + https://roguebasin.com/index.php/Diffusion-limited_aggregation
         + Gives winding open map
         + Can be used on an already existing map for deterioration effect
       + DLA with Central Attractor
         + A space carved out in the center of a map
       + Voronoi Diagrams
         + Looks like a beehive
         + Can make organic cells, useful for city building,
           placing things (characters/items) on maps in groups
       + Perlin/Simplex Noise
         + Can be used for world generation (making heightmaps)
         + Mix in a second noise layer for more detail
       + Dijkstra
         + Can be used to place exit points or items based on accessability
         + Make a "hot path"
         + Order the progression of a story
 
  Part 4: GUI and map editor
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals
     + Add gui and menu system
     + Create terrain editor to edit pre-generated terrain
   
   + GUI:
     + ...

   + Terrain editor:
     + ...


  Part 5: Characters
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals
     + Work on the character class and components
     + Add some test NPCs
     + Add senses and health system
     + Add skill/stat system
  
  + Character
    + Name
    + Type
      + Sub-type
    + Stats
    + Skills
    + Inventory
    + Health
    + State
    + Senses
      + Sight
      + Hearing
      + Touch
      + Smell
  
  + Player character
    + Controllable character
  
   + NPC
     + Non-player controlled character
     + AI
       + Roguelike Radio, AI
         https://youtu.be/T5BUjNi1kBc?si=vsIskF8oPscC5w5z
     + Pathfinding
 

  Part 6: Core gameplay
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals
     + Change from turn based to real time (turn based in combat only)
     + Add items and inventory system
     + Add combat system
     + Add dialogue system
     + Interactions and tasks system
  
   + Items
     + ...

   + Combat
     + ...

   + Dialogue system
     + ...


  Part 7: ???
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + More things
     + Audio
     + Effects/particles
     + Weather system
     + Thousands of other things... :(
     + And more ...


  Part 8: Success
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   + Goals:
     + Finish the thing

   + Done and done!


